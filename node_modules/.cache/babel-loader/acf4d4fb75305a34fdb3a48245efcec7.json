{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { toast } from \"react-hot-toast\";\nexport function useName() {\n  _s();\n\n  const regex = /[!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~*]/;\n  const [name, setName] = useState(\"\");\n\n  const onChangeName = e => {\n    if (e.target.value.length > 10) {\n      toast.error(\"Name is invalid. Max characters are 10\");\n    }\n\n    setName(e.target.value);\n  };\n\n  const validateName = () => {\n    if (name.length < 3 || name.length > 10) {\n      return {\n        error: true,\n        message: \"Name is invalid. Min characters are 3 and Max characters are 10\"\n      };\n    }\n\n    if (regex.test(name)) {\n      return {\n        error: true,\n        message: \"Name is invalid. Can't have symbols \"\n      };\n    }\n\n    return {\n      error: false\n    };\n  };\n\n  return {\n    name,\n    onChangeName,\n    validateName\n  };\n}\n\n_s(useName, \"gFPpQ6rgfiGkmgRsh4q2nIO1W+Q=\");\n\nexport function usePassword() {\n  _s2();\n\n  const regex = new RegExp(\"^(?=.*[A-Za-z])(?=.*d)[A-Za-zd]{8,}$\");\n  const [password, setPassword] = useState(\"\");\n\n  const onChangePassword = e => {\n    setPassword(e.target.value);\n  };\n\n  const validatePassword = () => {\n    if (password.length < 8) {\n      return {\n        error: true,\n        message: \"Password is invalid. Min characters are 8\"\n      };\n    }\n\n    if (regex.test(password)) {\n      return {\n        error: true,\n        message: \"Password is invalid. Allow only numbers and characters\"\n      };\n    }\n\n    return {\n      error: false\n    };\n  };\n\n  return {\n    password,\n    onChangePassword,\n    validatePassword\n  };\n}\n\n_s2(usePassword, \"fsE4KjUtTGid/UZc9Uo/kD8+5F8=\");\n\nexport function useEmail() {\n  _s3();\n\n  const regex = /^(([^<>()[\\].,;:\\s@”]+(\\.[^<>()\\[\\]\\.,;:\\s@\\”]+)*)|(\\”.+\\”))@(([^<>()[\\]\\.,;:\\s@\\”]+\\.)+[^<>()[\\].,;:\\s@\\”]{2,})$/;\n  const [email, setEmail] = useState(\"\");\n\n  const onChangeEmail = e => {\n    setEmail(e.target.value);\n  };\n\n  const validateEmail = () => {\n    if (!regex.test(email)) {\n      return {\n        error: true,\n        message: \"Email is invalid\"\n      };\n    }\n\n    return {\n      error: false\n    };\n  };\n\n  return {\n    email,\n    onChangeEmail,\n    validateEmail\n  };\n}\n\n_s3(useEmail, \"Pe1zWWKcsJK82m3WyFiCTurRPxo=\");\n\nexport default useEmail;","map":{"version":3,"sources":["/home/marcelo/EJERCICIOS P5/26-checkpoint-OMDB/src/hooks/validate/logger.js"],"names":["useState","toast","useName","regex","name","setName","onChangeName","e","target","value","length","error","validateName","message","test","usePassword","RegExp","password","setPassword","onChangePassword","validatePassword","useEmail","email","setEmail","onChangeEmail","validateEmail"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport { toast } from \"react-hot-toast\";\n\nexport function useName() {\n  const regex = /[!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~*]/;\n  const [name, setName] = useState(\"\");\n\n  const onChangeName = (e) => {\n    if (e.target.value.length > 10) {\n      toast.error(\"Name is invalid. Max characters are 10\");\n    }\n    setName(e.target.value);\n  };\n\n  const validateName = () => {\n    if (name.length < 3 || name.length > 10) {\n      return {\n        error: true,\n        message:\n          \"Name is invalid. Min characters are 3 and Max characters are 10\",\n      };\n    }\n    if (regex.test(name)) {\n      return { error: true, message: \"Name is invalid. Can't have symbols \" };\n    }\n    return { error: false };\n  };\n\n  return { name, onChangeName, validateName };\n}\n\nexport function usePassword() {\n  const regex = new RegExp(\"^(?=.*[A-Za-z])(?=.*d)[A-Za-zd]{8,}$\");\n  const [password, setPassword] = useState(\"\");\n\n  const onChangePassword = (e) => {\n    setPassword(e.target.value);\n  };\n\n  const validatePassword = () => {\n    if (password.length < 8) {\n      return {\n        error: true,\n        message: \"Password is invalid. Min characters are 8\",\n      };\n    }\n    if (regex.test(password)) {\n      return {\n        error: true,\n        message: \"Password is invalid. Allow only numbers and characters\",\n      };\n    }\n    return { error: false };\n  };\n\n  return { password, onChangePassword, validatePassword };\n}\n\nexport function useEmail() {\n  const regex =\n    /^(([^<>()[\\].,;:\\s@”]+(\\.[^<>()\\[\\]\\.,;:\\s@\\”]+)*)|(\\”.+\\”))@(([^<>()[\\]\\.,;:\\s@\\”]+\\.)+[^<>()[\\].,;:\\s@\\”]{2,})$/;\n  const [email, setEmail] = useState(\"\");\n  const onChangeEmail = (e) => {\n    setEmail(e.target.value);\n  };\n\n  const validateEmail = () => {\n    if (!regex.test(email)) {\n      return { error: true, message: \"Email is invalid\" };\n    }\n    return { error: false };\n  };\n\n  return { email, onChangeEmail, validateEmail };\n}\n\nexport default useEmail;\n"]},"metadata":{},"sourceType":"module"}